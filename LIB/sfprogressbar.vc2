*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sfprogressbar.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfprogressbar AS progressbar OF "progressbarex.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setupprogressbar		&& Sets up the progress bar
		*p: lsetup		&& .T. if the progress bar has been set up
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED lsetup
	lsetup = .F.		&& .T. if the progress bar has been set up
	Name = "sfprogressbar"
	_memberdata = <VFPData>
		<memberdata name="setupprogressbar" type="method" display="SetupProgressBar"/>
		<memberdata name="lsetup" type="property" display="lSetup"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE Init
		* This comment is here so the parent class' Init does nothing.
		
	ENDPROC

	PROCEDURE setupprogressbar		&& Sets up the progress bar
		* This code was copied from the parent class Init method. The purpose is to
		* allow properties to be set programmatically after instantiating the class,
		* and allow the progress bar to be set up accordingly. At the end of the code,
		* we set the lSetup property to .T. so Value_Assign will know it's been done.
		
		LOCAL lnBarWidth, lnCounter, lcControlName
		SET CLASSLIB TO (LOCFILE("progressbarex.vcx")) ADDITIVE
		
		WITH THIS
			lnBarWidth = IIF(.solidbar, INT(.width/.bars), INT((.WIDTH - .bars) / .bars))
			
			FOR lnCounter = 1 TO this.bars -1
				lcControlName = "pbBar" + TRANSFORM(lnCounter)
				.ADDOBJECT(lcControlName, "pbbar", .BarColor, lnBarWidth, .HEIGHT -2)
				.CONTROLS(lnCounter).LEFT = IIF(.solidbar, lnBarWidth * (lnCounter -1) + 1, (lnBarWidth * (lnCounter -1)) + (2 * (lnCounter -1)) + 1)
				.CONTROLS(lnCounter).TOP = 1
			ENDFOR
		
			lnCounter = this.bars
			lcControlName = "pbBar" + TRANSFORM(lnCounter)
			.ADDOBJECT(lcControlName, "pbbar", .BarColor, lnBarWidth, .HEIGHT - 2)
			.CONTROLS(lnCounter).LEFT = IIF(.solidbar, .CONTROLS(lnCounter - 1).LEFT + lnBarWidth, .CONTROLS(lnCounter - 1).LEFT + lnBarWidth + 2)
			.CONTROLS(lnCounter).WIDTH = IIF(.solidbar, Max((.WIDTH - 1) -.CONTROLS(lnCounter).LEFT, 1),  Max(.WIDTH - .CONTROLS(lnCounter).LEFT - 2, 1))
			.CONTROLS(lnCounter).TOP = 1
			
			IF .showpercentage
				.ADDOBJECT("lblPercent", "Label")
				WITH .lblPercent
					.fontbold = .T.
					.backstyle = 0
					.alignment = 2
					.autosize = .t.
					.caption = "100%"
					.top = (this.height/2 - .height/2)
					.Left = this.width/2 - .width/2
					.caption = "0%"
					.visible = .T.
					.ZOrder(1)
				ENDWITH
			ENDIF
		
		* Flag that we've been set up.
		
			.lSetup = .T.
		ENDWITH
		
	ENDPROC

	PROCEDURE value_assign
		lparameters tuNewVal
		
		* Set up the progress bar if it hasn't been done.
		
		if not This.lSetup
			This.SetupProgressBar()
		endif not This.lSetup
		
		* Ensure we're visible the first time we're needed.
		
		if tuNewVal <> 0 and not This.Visible
			This.Visible = .T.
		endif tuNewVal <> 0 ...
		dodefault(tuNewVal)
		
	ENDPROC

ENDDEFINE
